{"version":3,"sources":["Ticket.js","CreateForm.js","App.js","serviceWorker.js","index.js"],"names":["Ticket","this","props","tickets","length","ticketsDisplay","map","data","index","ticketkey","titlekey","subtaskskey","timelogkey","formattedSubtasks","finalizedSubtasks","undefined","subtasks","x","subtasksGroup","dt","react_default","a","createElement","key","push","className","title","description","timelog","Component","CreateForm","onChange","setTicketNumber","value","ticketNumber","setTicketType","ticketType","onClick","createTicketAndToggle","createTicket","App","_this","Object","classCallCheck","testTickets","subtasksA","possibleConstructorReturn","getPrototypeOf","call","getSubtasks","ticketA","columnize","result","subtasksB","ticketB","subtasksC","ticketC","subtasksD","ticketD","state","bind","assertThisInitialized","event","number","target","setState","type","ticket","src_Ticket","src_CreateForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.98792cd9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass Ticket extends Component {\n\n\trender() {\n\t\tif (this.props.tickets.length > 0) {\n\t\t\tthis.ticketsDisplay = this.props.tickets.map(function(data, index) {\n\t\t\t\tconst ticketkey = 'ticket' + index;\n\t\t\t\tconst titlekey = 'title' + index;\n\t\t\t\tconst subtaskskey = 'subtasks' + index;\n\t\t\t\tconst timelogkey = 'timelog' + index;\n\t\t\t\tvar formattedSubtasks = [];\n\t\t\t\tvar finalizedSubtasks = '';\n\t\t\t\tif (data.subtasks !== undefined) {\n\t\t\t\t\tfor (var x in data.subtasks) {\n\t\t\t\t\t\tvar subtasks = data.subtasks[x];\n\t\t\t\t\t\tvar subtasksGroup = subtasks.map(function(dt, index) {\n\t\t\t\t\t\t\treturn ([\n\t\t\t\t\t\t\t\t<span key={index}>[ ] {dt}; <br /></span>\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tformattedSubtasks.push(subtasksGroup);\n\t\t\t\t\t}\n\t\t\t\t\tfinalizedSubtasks = formattedSubtasks.map(function(dt, index) {\n\t\t\t\t\t\treturn ([\n\t\t\t\t\t\t\t<div className=\"subtasksBlock\" key={index}>{dt}</div>\n\t\t\t\t\t\t]);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn ([\n\t\t\t\t\t<div className=\"ticket\" key={ticketkey}>\n\t\t\t\t\t<span className=\"title\" key={titlekey}>{data.title}: {data.description}</span><br />\n\t\t\t\t\t<span className=\"subtasks\" key={subtaskskey}>{finalizedSubtasks}</span><br /><br className=\"clearit\" />\n\t\t\t\t\t<span className=\"timelog\" key={timelogkey}>{data.timelog}</span><br />\n\t\t\t\t\t</div>\n\t\t\t\t]);\n\t\t\t});\n\t\t} else {\n\t\t\tthis.ticketsDisplay = 'there are no tickets, currently';\n\t\t}\n\n\t\treturn (\n\t\t\t<header className=\"App-header\">\n\t\t\t\t{this.ticketsDisplay}\n\t\t\t</header>\n\t\t);\n\t}\n}\n\nexport default Ticket;\n","import React, { Component } from 'react';\nimport './App.css';\n\nclass CreateForm extends Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<p>\n\t\t\t\tticket number: <input className=\"ticketNumber\" onChange={this.props.setTicketNumber} value={this.props.ticketNumber} /><br />\n\t\t\t\tticket type: <select className=\"ticketType\" onChange={this.props.setTicketType} value={this.props.ticketType}>\n\t\t\t\t\t\t<option>error</option>\n\t\t\t\t\t\t<option>feature</option>\n\t\t\t\t\t\t<option>review</option>\n\t\t\t\t\t\t<option>report</option>\n\t\t\t\t\t</select><br />\n\t\t\t\t<button onClick={this.props.createTicketAndToggle}>create & toggle</button> <button onClick={this.props.createTicket}>create</button> \n\t\t\t</p>\n\t\t);\n\t}\n}\n\nexport default CreateForm;\n","import React, { Component } from 'react';\nimport Ticket from './Ticket.js';\nimport CreateForm from './CreateForm.js';\nimport columnize from 'columnize';\nimport './App.css';\n\nclass App extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tvar testTickets = [];\n\t\tvar subtasksA = this.getSubtasks('error');\n\t\tvar subtasksA2 = columnize(subtasksA, 3, 4);\n\t\tvar ticketA = {\n\t\t\ttitle: \"test1\",\n\t\t\tdescription: \"desc1\",\n\t\t\tsubtasks: subtasksA2.result,\n\t\t\ttimelog: \"\"\n\t\t};\n\t\ttestTickets.push(ticketA);\n\t\tvar subtasksB = this.getSubtasks('feature');\n\t\tvar subtasksB2 = columnize(subtasksB, 3, 4);\n\t\tvar ticketB = {\n\t\t\ttitle: \"test2\",\n\t\t\tdescription: \"desc2\",\n\t\t\tsubtasks: subtasksB2.result,\n\t\t\ttimelog: \"\"\n\t\t};\n\t\ttestTickets.push(ticketB);\n\t\tvar subtasksC = this.getSubtasks('review');\n\t\tvar subtasksC2 = columnize(subtasksC, 3, 4);\n\t\tvar ticketC = {\n\t\t\ttitle: \"test3\",\n\t\t\tdescription: \"desc3\",\n\t\t\tsubtasks: subtasksC2.result,\n\t\t\ttimelog: \"\"\n\t\t};\n\t\ttestTickets.push(ticketC);\n\t\tvar subtasksD = this.getSubtasks('report');\n\t\tvar subtasksD2 = columnize(subtasksD, 3, 4);\n\t\tvar ticketD = {\n\t\t\ttitle: \"test4\",\n\t\t\tdescription: \"desc4\",\n\t\t\tsubtasks: subtasksD2.result,\n\t\t\ttimelog: \"\"\n\t\t};\n\t\ttestTickets.push(ticketD);\n\n//\t\tthis.state = {tickets: testTickets, ticketNumber: \"\", ticketType: \"error\"};\n\t\tthis.state = {tickets: [], ticketNumber: \"\", ticketType: \"error\"};\n\t\tthis.setTicketNumber = this.setTicketNumber.bind(this);\n\t\tthis.setTicketType = this.setTicketType.bind(this);\n\t\tthis.createTicket = this.createTicket.bind(this);\n\t\tthis.createTicketAndToggle = this.createTicketAndToggle.bind(this);\n\t\tthis.getSubtasks = this.getSubtasks.bind(this);\n\t}\n\n\tsetTicketNumber(event) {\n\t\tvar number = event.target.value;\n\t\tthis.setState({ticketNumber: number});\n\t}\n\n\tsetTicketType(event) {\n\t\tvar type = event.target.value;\n\t\tthis.setState({ticketType: type});\n\t}\n\n\tgetSubtasks(ticketType) {\n\t\tvar subtasks;\n\t\tif (ticketType === \"error\") {\n\t\t\tsubtasks = [\n\t\t\t\t\"looked over ticket\",\n\t\t\t\t\"estimated ticket\",\n\t\t\t\t\"diagnosed error\",\n\t\t\t\t\"set up testing\",\n\t\t\t\t\"fixed error\",\n\t\t\t\t\"verified tests pass\",\n\t\t\t\t\"checked queries for syntax\",\n\t\t\t\t\"checked quotes\",\n\t\t\t\t\"checked for potential cowbell\",\n\t\t\t\t\"checked code over with James\"\n\t\t\t];\n\t\t} else if (ticketType === \"feature\") {\n\t\t\tsubtasks = [\n\t\t\t\t\"looked over ticket\",\n\t\t\t\t\"estimated ticket\",\n\t\t\t\t\"checked layout ?s with James\",\n\t\t\t\t\"got UI set up with dummy data\",\n\t\t\t\t\"moved data to handler & connected\",\n\t\t\t\t\"moved dummy data to model\",\n\t\t\t\t\"hooked up model to database\",\n\t\t\t\t\"verified UI, handler, and model\",\n\t\t\t\t\"set up testing\",\n\t\t\t\t\"verified tests pass\",\n\t\t\t\t\"checked queries for syntax\",\n\t\t\t\t\"checked quotes\",\n\t\t\t\t\"checked for potential cowbell\",\n\t\t\t\t\"checked code over with James\"\n\t\t\t];\n\t\t} else if (ticketType === \"review\") {\n\t\t\tsubtasks = [\n\t\t\t\t\"checked branch destination\",\n\t\t\t\t\"checked quotes\",\n\t\t\t\t\"checked queries\",\n\t\t\t\t\"checked scripts\",\n\t\t\t\t\"checked code\",\n\t\t\t\t\"tested cases\"\n\t\t\t];\n\t\t} else if (ticketType === \"report\") {\n\t\t\tsubtasks = [\n\t\t\t\t\"looked over ticket\",\n\t\t\t\t\"estimated ticket\",\n\t\t\t\t\"found old report\",\n\t\t\t\t\"generated old report for comparison\",\n\t\t\t\t\"moved old report over to o3\",\n\t\t\t\t\"compared old report and new report\",\n\t\t\t\t\"verified tests pass\",\n\t\t\t\t\"checked queries for syntax\",\n\t\t\t\t\"checked quotes\",\n\t\t\t\t\"checked for potential cowbell\",\n\t\t\t\t\"checked code over with James\"\n\t\t\t];\n\t\t}\n\t\treturn subtasks;\n\t}\n\n\tcreateTicket() {\n\t\tvar ticketNumber = this.state.ticketNumber;\n\t\tvar ticketType = this.state.ticketType;\n\t\tvar subtasks = this.getSubtasks(ticketType);\n\t\tvar subtasks2 = columnize(subtasks, 3, 4);\n\t\tvar ticket = {\n\t\t\ttitle: ticketNumber,\n\t\t\tdescription: \"\",\n\t\t\tsubtasks: subtasks2.result,\n\t\t\ttimelog: \"\"\n\t\t};\n\t\tvar tickets = this.state.tickets;\n\t\ttickets.push(ticket);\n\t\tthis.setState({tickets: tickets, ticketNumber: \"\", ticketType: \"error\"});\n\t}\n\n\tcreateTicketAndToggle() {\n\t\tthis.createTicket();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Ticket tickets={this.state.tickets} />\n\t\t\t\t<CreateForm ticketNumber={this.state.ticketNumber} ticketType={this.state.ticketType} setTicketNumber={this.setTicketNumber} setTicketType={this.setTicketType} createTicketAndToggle={this.createTicketAndToggle} createTicket={this.createTicket} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
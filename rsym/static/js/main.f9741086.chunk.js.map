{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","date","Date","currentDate","getFullYear","getMonth","getDate","state","showForm","toggleShowForm","bind","assertThisInitialized","event","otherVisibility","setState","react_default","a","createElement","className","src","logo","alt","onClick","value","type","name","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"oRAqDeA,qBA/Cd,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,IACN,IAAIQ,EAAO,IAAIC,KACXC,EAAcF,EAAKG,cAAgB,KAAOH,EAAKI,WAAa,GAAK,IAAMJ,EAAKK,UAH9D,OAIlBZ,EAAKa,MAAQ,CAACC,UAAU,EAAOL,YAAaA,GAC5CT,EAAKe,eAAiBf,EAAKe,eAAeC,KAApBf,OAAAgB,EAAA,EAAAhB,QAAAgB,EAAA,EAAAhB,CAAAD,KALJA,8EAaJkB,GACd,IAAIC,GAAmBhB,KAAKU,MAAMC,SAClCX,KAAKiB,SAAS,CAACN,SAAUK,qCAIzB,OACCE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,UAAQC,UAAWrB,KAAKU,MAAMC,SAAW,aAAe,cACvDO,EAAAC,EAAAC,cAAA,yBAGAF,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,OAAOC,QAASzB,KAAKY,iBAC9DM,EAAAC,EAAAC,cAAA,oDAIDF,EAAAC,EAAAC,cAAA,UAAQC,UAAWrB,KAAKU,MAAMC,SAAW,aAAe,cACvDO,EAAAC,EAAAC,cAAA,iCADD,SAIOF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,WAAWK,MAAO1B,KAAKU,MAAMJ,cAJrD,UAKQY,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cALzB,SAMOH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,aACvBH,EAAAC,EAAAC,cAAA,SAAOO,KAAK,QAAQC,KAAK,OAAOP,UAAU,aAP3C,IAOyDH,EAAAC,EAAAC,cAAA,sBACxDF,EAAAC,EAAAC,cAAA,SAAOO,KAAK,QAAQC,KAAK,OAAOP,UAAU,aAR3C,IAQyDH,EAAAC,EAAAC,cAAA,2BACxDF,EAAAC,EAAAC,cAAA,UAAQK,QAASzB,KAAKY,gBAAtB,QACAM,EAAAC,EAAAC,cAAA,UAAQK,QAASzB,KAAKY,gBAAtB,mBA1CaiB,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.f9741086.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tvar date = new Date();\n\t\tvar currentDate = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();\n\t\tthis.state = {showForm: false, currentDate: currentDate};\n\t\tthis.toggleShowForm = this.toggleShowForm.bind(this);\n//\t\tthis.setHour = this.setHour.bind(this);\n//\t\tthis.setMinute = this.setMinute.bind(this);\n//\t\tthis.setMeridian = this.setMeridian.bind(this);\n//\t\tthis.setEventKind = this.setEventKind.bind(this);\n//\t\tthis.checkFashionablyLateness = this.checkFashionablyLateness.bind(this);\n\t}\t\n\n\ttoggleShowForm(event) {\n\t\tvar otherVisibility = !this.state.showForm;\n\t\tthis.setState({showForm: otherVisibility});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className={this.state.showForm ? \"App-hidden\" : \"App-header\"}>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tSaveyermoney\n\t\t\t\t\t</p>\n\t\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" onClick={this.toggleShowForm} />\n\t\t\t\t\t<p>\n\t\t\t\t\t\tClick the spinning icon to get started\n\t\t\t\t\t</p>\n\t\t\t\t</header>\n\t\t\t\t<header className={this.state.showForm ? \"App-header\" : \"App-hidden\"}>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tCreate a transaction\n\t\t\t\t\t</p>\n\t\t\t\t\tDate: <input className=\"App-date\" value={this.state.currentDate} />\n\t\t\t\t\tPayee: <input className=\"App-payee\" />\n\t\t\t\t\tItem: <input className=\"App-item\" />\n\t\t\t\t\t<input type=\"radio\" name=\"type\" className=\"App-type\" /> <span>income</span>\n\t\t\t\t\t<input type=\"radio\" name=\"type\" className=\"App-type\" /> <span>transaction</span>\n\t\t\t\t\t<button onClick={this.toggleShowForm}>Save</button>\n\t\t\t\t\t<button onClick={this.toggleShowForm}>Cancel</button>\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}
{"version":3,"sources":["Car.js","Info.js","App.js","serviceWorker.js","index.js"],"names":["Car","react_default","a","createElement","className","id","this","props","carName","onClick","setCar","Component","Info","doShow","shown","notShown","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","cars","carsSighted","carsSightedDisplay","sightingDatetime","moment","format","show","setTheCar","bind","assertThisInitialized","markSighting","filter","value","index","self","indexOf","uniqueCars","sort","b","event","theCar","target","push","makeArrayUnique","sortArray","join","setState","sightingName","result","rtsightings","indexeddb","console","log","showIt","_this2","src_Info","map","i","src_Car","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7fb53a05.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass Car extends Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<p className=\"car\" id={this.props.carName} onClick={this.props.setCar}>\n\t\t\t\t\t{this.props.carName}\n\t\t\t</p>\n\t\t);\n\t}\n}\n\nexport default Car;\n","import React, { Component } from 'react';\nimport './App.css';\n\nclass Info extends Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<span className=\"infoContainer\" onClick={this.props.doShow}>\n\t\t\t\t<span className={this.props.shown}>\n\t\t\t\t\t[i]\n\t\t\t\t</span>\n\t\t\t\t<span className={this.props.notShown}>\n\t\t\t\t\tSTUFF\n\t\t\t\t</span>\n\t\t\t</span>\n\t\t);\n\t}\n}\n\nexport default Info;\n","import React, { Component } from 'react';\nimport Car from './Car.js';\nimport Info from './Info.js';\nimport indexeddb from 'rtsightings/src/indexeddb.js';\nimport moment from 'moment';\nimport rtsightings from 'rtsightings';\nimport './App.css';\n\nclass App extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tvar cars = [\n\t\t\t'gray',\n\t\t\t'whiteSub',\n\t\t\t'greenSub',\n\t\t\t'whiteCoveredTruck',\n\t\t\t'whiteTruck',\n\t\t\t'redTruck',\n\t\t\t'redSedan'\n\t\t];\n\t\tthis.state = {cars: cars, carsSighted: [], carsSightedDisplay: '', sightingDatetime: moment().format(), shown: 'info', notShown: 'hdn', show: false};\n\t\tthis.setTheCar = this.setTheCar.bind(this);\n\t\tthis.markSighting = this.markSighting.bind(this);\n\t\tthis.doShow = this.doShow.bind(this);\n\n\t}\t\n\n\tmakeArrayUnique(carsSighted) {\n\t\tfunction onlyUnique(value, index, self) {\n\t\t\treturn self.indexOf(value) === index;\n\t\t}\n\t\tvar uniqueCars = carsSighted.filter(onlyUnique);\n\t\treturn uniqueCars;\n\t}\n\n\tsortArray(uniqueCars) { \n\t\tuniqueCars.sort(function(a, b){\n\t\t\tif(a < b) { return -1; }\n\t\t\tif(a > b) { return 1; }\n\t\t\treturn 0;\n\t\t});\n\t\treturn uniqueCars;\n\t}\n\n\tsetTheCar(event) {\n\t\tvar theCar = event.target.id;\n\t\tvar carsSighted = this.state.carsSighted;\n\t\tcarsSighted.push(theCar);\n\t\tvar uniqueCars = this.makeArrayUnique(carsSighted);\n\t\tvar sortedCars = this.sortArray(uniqueCars);\n\t\tvar carsSightedDisplay = sortedCars.join(', ');\n\t\tthis.setState({carsSighted: uniqueCars, carsSightedDisplay: carsSightedDisplay});\n\t}\n\n\tmarkSighting(event) {\n\t\tvar sightingName = 'sighting' + moment().format('YYMMDDkkmm');\n\t\tvar result = rtsightings(sightingName, this.state.sightingDatetime, this.state.carsSighted, 'sightings', indexeddb);\nconsole.log(result);\n\t\tthis.setState({carsSighted: [], carsSightedDisplay: ''});\n//\t\trtsightings.get();\n\t}\n\n\tdoShow(event) {\n\t\tvar showIt = !(this.state.show);\n\t\tif (showIt) {\n\t\t\tthis.setState({shown: 'hdn', notShown: 'info', show: showIt});\n\t\t} else {\n\t\t\tthis.setState({shown: 'info', notShown: 'hdn', show: showIt});\n\t\t}\n\t}\n\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t<p>\n\t\t\t\t\tRedtruck Sightings<Info shown={this.state.shown} notShown={this.state.notShown} doShow={this.doShow}  />\n\t\t\t\t</p>\n\t\t\t\t<p>{this.state.carsSightedDisplay}</p>\n\t\t\t\t{this.state.cars.map((carName, i) => {\n\t\t\t\t\treturn (<Car key={i} carName={carName} setCar={this.setTheCar} />)\n\t\t\t\t})}\n\t\t\t\t<button onClick={this.markSighting}>\n\t\t\t\t\tSave\n\t\t\t\t</button>\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
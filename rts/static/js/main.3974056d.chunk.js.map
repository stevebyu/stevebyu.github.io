{"version":3,"sources":["Car.js","App.js","serviceWorker.js","index.js"],"names":["Car","react_default","a","createElement","className","id","this","props","carName","onClick","setCar","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","cars","carsSighted","carsSightedDisplay","sightingDatetime","setTheCar","bind","assertThisInitialized","markSighting","event","push","target","join","setState","rtsightings","createSighting","idb","_this2","map","i","src_Car","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OA+BeA,yLARb,OACCC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,MAAMC,GAAIC,KAAKC,MAAMC,QAASC,QAASH,KAAKC,MAAMG,QAC5DJ,KAAKC,MAAMC,gBAtBCG,gDCoEHC,cA/Dd,SAAAA,EAAYL,GAAO,IAAAM,EAAAC,OAAAC,EAAA,EAAAD,CAAAR,KAAAM,GAAA,OAClBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAR,KAAAQ,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAZ,KAAMC,KAUDY,MAAQ,CAACC,KATH,CACV,OACA,WACA,WACA,oBACA,aACA,WACA,YAEyBC,YAAa,GAAIC,mBAAoB,GAAIC,iBAAkB,IACrFV,EAAKW,UAAYX,EAAKW,UAAUC,KAAfX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACjBA,EAAKc,aAAed,EAAKc,aAAaF,KAAlBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAbFA,yEA6BTe,GACT,IAAIP,EAAcf,KAAKa,MAAME,YAC7BA,EAAYQ,KAAKD,EAAME,OAAOzB,IAC9B,IAAIiB,EAAqBD,EAAYU,KAAK,MAC1CzB,KAAK0B,SAAS,CAACX,YAAaA,EAAaC,mBAAoBA,yCAGjDM,GACZK,IAAYC,eAAe5B,KAAKa,MAAMI,iBAAkBjB,KAAKa,MAAME,YAAa,YAAac,sCAMrF,IAAAC,EAAA9B,KACR,OACCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAClBH,EAAAC,EAAAC,cAAA,+BAGAF,EAAAC,EAAAC,cAAA,SAAIG,KAAKa,MAAMG,oBACdhB,KAAKa,MAAMC,KAAKiB,IAAI,SAAC7B,EAAS8B,GAC9B,OAAQrC,EAAAC,EAAAC,cAACoC,EAAD,CAAKC,IAAKF,EAAG9B,QAASA,EAASE,OAAQ0B,EAAKZ,cAErDvB,EAAAC,EAAAC,cAAA,UAAQM,QAASH,KAAKqB,cAAtB,iBAxDchB,aCME8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3974056d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass Car extends Component {\n\n//\tconstructor(props) {\n//\t\tsuper(props); \n//\t}\t\n//\n//\tsetTheCar(event) {\n//\t\tvar carsSighted = this.state.carsSighted;\n//\t\tcarsSighted.push(event.target.value);\n//\t\tthis.setState({carsSighted: carsSighted});\n//\t}\n//\n//\tmarkSighting(event) {\n//\t\trtsightings.createSighting(this.state.sightingDatetime, this.state.carsSighted, 'sightings', idb);\n////\t\trtsightings.get();\n//\t}\n\n\n\n\trender() {\n\t\treturn (\n\t\t\t<p className=\"car\" id={this.props.carName} onClick={this.props.setCar}>\n\t\t\t\t\t{this.props.carName}\n\t\t\t</p>\n\t\t);\n\t}\n}\n\nexport default Car;\n","import React, { Component } from 'react';\nimport Car from './Car.js';\nimport idb from 'idb';\nimport rtsightings from 'rtsightings';\nimport './App.css';\n\nclass App extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tvar cars = [\n\t\t\t'gray',\n\t\t\t'whiteSub',\n\t\t\t'greenSub',\n\t\t\t'whiteCoveredTruck',\n\t\t\t'whiteTruck',\n\t\t\t'redTruck',\n\t\t\t'redSedan'\n\t\t];\n\t\tthis.state = {cars: cars, carsSighted: [], carsSightedDisplay: '', sightingDatetime: ''};\n\t\tthis.setTheCar = this.setTheCar.bind(this);\n\t\tthis.markSighting = this.markSighting.bind(this);\n\n//\t\tidb.open('mydb', 1, (upgradeDB) => {\n//\t\t\tupgradeDB.createObjectStore('names');\n//\t\t})\n//\t\t.then(db => {\n//\t\t\tdb.transaction('names')\n//\t\t\t\t.objectStore('names')\n//\t\t\t\t.getAll()\n//\t\t\t.then(objects => {\n//\t\t\t\tthis.setState({displayname: objects[0], timeEntered: objects[1]});\n//\t\t\t});\n//\t\t}) \n\n\t}\t\n\n\tsetTheCar(event) {\n\t\tvar carsSighted = this.state.carsSighted;\n\t\tcarsSighted.push(event.target.id);\n\t\tvar carsSightedDisplay = carsSighted.join(', ');\n\t\tthis.setState({carsSighted: carsSighted, carsSightedDisplay: carsSightedDisplay});\n\t}\n\n\tmarkSighting(event) {\n\t\trtsightings.createSighting(this.state.sightingDatetime, this.state.carsSighted, 'sightings', idb);\n//\t\trtsightings.get();\n\t}\n\n\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t<p>\n\t\t\t\t\tRedtruck Sightings\n\t\t\t\t</p>\n\t\t\t\t<p>{this.state.carsSightedDisplay}</p>\n\t\t\t\t{this.state.cars.map((carName, i) => {\n\t\t\t\t\treturn (<Car key={i} carName={carName} setCar={this.setTheCar} />)\n\t\t\t\t})}\n\t\t\t\t<button onClick={this.markSighting}>\n\t\t\t\t\tSave\n\t\t\t\t</button>\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
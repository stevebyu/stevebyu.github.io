{"version":3,"sources":["Car.js","ZForm.js","Sighting.js","Info.js","App.js","serviceWorker.js","index.js"],"names":["Car","react_default","a","createElement","className","this","props","selctd","id","carName","onClick","setCar","Component","ZForm","_this","zformclass","cars","map","i","carsSighted","indexOf","src_Car","key","setTheCar","markSighting","Sighting","sighting","sightingDatetime","join","Info","doShow","shown","notShown","sightings","src_Sighting","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","moment","format","show","sightingsThere","bind","assertThisInitialized","getSightings","filter","value","index","self","uniqueCars","sort","b","event","theCar","target","e","push","makeArrayUnique","sortedCars","sortArray","setState","sightingName","rtsightings","indexeddb","that","getsightings","items","time1","time2","comparison","justTheTop5","slice","showIt","console","log","src_Info","src_ZForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9f1297d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass Car extends Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<p className={this.props.selctd} id={this.props.carName} onClick={this.props.setCar}>\n\t\t\t\t\t{this.props.carName}\n\t\t\t</p>\n\t\t);\n\t}\n}\n\nexport default Car;\n","import React, { Component } from 'react';\nimport Car from './Car.js';\nimport './App.css';\n\nclass ZForm extends Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<div className={this.props.zformclass}>\n\t\t\t\t{this.props.cars.map((carName, i) => {\n\t\t\t\t\tvar selctd = this.props.carsSighted.indexOf(carName) > -1 ? 'selectedCar' : 'car';\n\t\t\t\t\treturn (<Car key={i} carName={carName} selctd={selctd} setCar={this.props.setTheCar} />)\n\t\t\t\t})}\n\t\t\t\t<button onClick={this.props.markSighting}>\n\t\t\t\t\tSave\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ZForm;\n","import React, { Component } from 'react';\nimport './App.css';\n\nclass Sighting extends Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"sighting\">\n\t\t\t\t<b>time:</b> {this.props.sighting.sightingDatetime} <br /> <b>cars sighted:</b> {this.props.sighting.carsSighted.join(' ')}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Sighting;\n","import React, { Component } from 'react';\nimport Sighting from './Sighting';\nimport './App.css';\n\nclass Info extends Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"infoContainer\" onClick={this.props.doShow}>\n\t\t\t\t<span className={this.props.shown}>\n\t\t\t\t\t[i]\n\t\t\t\t</span>\n\t\t\t\t<span className={this.props.notShown}>\n\t\t\t\t\t[close]<br></br><br></br>\n\t\t\t\t\t{this.props.sightings.map((sighting, i) => {\n\t\t\t\t\t\treturn (<Sighting key={i} sighting={sighting} />)\n\t\t\t\t\t})}\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Info;\n","import React, { Component } from 'react';\nimport ZForm from './ZForm.js';\nimport Info from './Info.js';\nimport indexeddb from 'rtsightings/src/indexeddb.js';\nimport moment from 'moment';\nimport rtsightings from 'rtsightings';\nimport getsightings from 'rtsightings/getsightings.js';\nimport './App.css';\n\nclass App extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tvar cars = [\n\t\t\t'gray',\n\t\t\t'whiteSub',\n\t\t\t'greenSub',\n\t\t\t'whiteCoveredTruck',\n\t\t\t'whiteTruck',\n\t\t\t'redTruck',\n\t\t\t'redSedan'\n\t\t];\n\t\tthis.state = {cars: cars, carsSighted: [], sightingDatetime: moment().format(), shown: 'info', notShown: 'hdn', show: false, sightingsThere: false, sightings: []};\n\t\tthis.setTheCar = this.setTheCar.bind(this);\n\t\tthis.markSighting = this.markSighting.bind(this);\n\t\tthis.doShow = this.doShow.bind(this);\n\t\tthis.getSightings = this.getSightings.bind(this); \n\t}\t\n\n\tmakeArrayUnique(carsSighted) {\n\t\tfunction onlyUnique(value, index, self) {\n\t\t\treturn self.indexOf(value) === index;\n\t\t}\n\t\tvar uniqueCars = carsSighted.filter(onlyUnique);\n\t\treturn uniqueCars;\n\t}\n\n\tsortArray(uniqueCars) { \n\t\tuniqueCars.sort(function(a, b){\n\t\t\tif(a < b) { return -1; }\n\t\t\tif(a > b) { return 1; }\n\t\t\treturn 0;\n\t\t});\n\t\treturn uniqueCars;\n\t}\n\n\tsetTheCar(event) {\n\t\tvar theCar = event.target.id;\n\t\tvar carsSighted = this.state.carsSighted;\n\t\tvar alreadyThere = carsSighted.indexOf(theCar);\n\t\tif (alreadyThere > -1) {\n\t\t\tcarsSighted = carsSighted.filter(function(e) { return e !== theCar });\n\t\t} else {\n\t\t\tcarsSighted.push(theCar);\n\t\t}\n\t\tvar uniqueCars = this.makeArrayUnique(carsSighted);\n\t\tvar sortedCars = this.sortArray(uniqueCars);\n\t\tthis.setState({carsSighted: sortedCars});\n\t}\n\n\tmarkSighting(event) {\n\t\tvar sightingName = 'sighting' + moment().format('YYMMDDkkmm');\n\t\trtsightings(sightingName, this.state.sightingDatetime, this.state.carsSighted, 'sightings', indexeddb);\n\t\tthis.setState({carsSighted: []});\n\t}\n\n\tgetSightings() {\n\n\t\tvar that = this;\n\t\tfunction saveSightingsToState(items) { \n\t\t\tfunction compare(a, b) {\n\t\t\t\tconst time1 = a.sightingDatetime;\n\t\t\t\tconst time2 = b.sightingDatetime;\n\n\t\t\t\tlet comparison = 0;\n\t\t\t\tif (time1 < time2) {\n\t\t\t\t\tcomparison = 1;\n\t\t\t\t} else if (time1 > time2) {\n\t\t\t\t\tcomparison = -1;\n\t\t\t\t}\n\t\t\t\treturn comparison;\n\t\t\t}\n\t\t\titems.sort(compare);\n\t\t\tvar justTheTop5 = items.slice(0,5);\n\t\t\tthat.setState({sightings: justTheTop5});\n\t\t}\n\n\t\tgetsightings('sightings', indexeddb, saveSightingsToState); \n\t}\n\n\tdoShow(event) {\n\t\tvar showIt = !(this.state.show);\n\t\tif (showIt) {\n\t\t\tvar sightingsThere = this.state.sightingsThere;\n\t\t\tif (sightingsThere) {\n\t\t\t\tconsole.log('stuff');\n\t\t\t} else {\n\t\t\t\tthis.getSightings();\n\t\t\t}\n\t\t\tthis.setState({shown: 'hdn', notShown: 'info', show: showIt, zformclass: 'hdn'});\n\t\t} else {\n\t\t\tthis.setState({shown: 'info', notShown: 'hdn', show: showIt, zformclass: 'zform'});\n\t\t}\n\t}\n\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t<div>\n\t\t\t\t\tRedtruck Sightings<Info shown={this.state.shown} notShown={this.state.notShown} doShow={this.doShow} sightings={this.state.sightings} />\n\t\t\t\t</div>\n\t\t\t\t<ZForm cars={this.state.cars} carsSighted={this.state.carsSighted} zformclass={this.state.zformclass} setTheCar={this.setTheCar} markSighting={this.markSighting} />\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}